# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]
# 사용할 인프라의 이름을 변수 형태로 저장 가능
env:
  # 버킷에 저장할 프로젝트 폴더 이름
  PROJECT_NAME: deploy
  # S3 생성 시 지정했던 이름
  BUCKET_NAME: springboot-intro-deploy
  # CodeDeploy의 앱 이름
  CODE_DEPLOY_APP_NAME: codeployservice
  # CodeDeploy의 배포그룹 이름
  DEPLOYMENT_GROUP_NAME: codedeployservice-group
jobs:
  build:
    # 실행 환경 지정
    runs-on: ubuntu-latest

    steps:
      # 현재 저장소의 루트 디렉토리로 체크아웃
      - uses: actions/checkout@v2

      # JDK 설정 및 준비
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17

      # Github Actions 워크플로우가 실행되는 가상 환경내에 application.properties 설정
      - name: Create directory for application.properties
        run: mkdir -p ./src/main/resources/

      - name: Generate application.properties
        run: echo "${{ secrets.APPLICATION_PROPERTIES_CONTENT }}" > ./src/main/resources/application.properties

      # Gradle 빌드 할 때, 이미 저장한 데이터를 캐싱하여 빌드시 이를 사용하도록함.
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-


      # Github Actions 워크플로우 가상환경이 grdlew 실행할 수 있도록 ./gradlew 파일에 실행 권한을 부여
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
        shell: bash

      # Gradle clean, build (Test 제외)
      - name: Build with Gradle
        run: ./gradlew clean build -x test
      
      # 전송할 파일을 담을 디렉토리 생성
      - name: Make Directory for deliver
        run: mkdir $PROJECT_NAME

      # Jar 파일 Copy
      - name: Copy Jar
        run: cp ./build/libs/*.jar ./$PROJECT_NAME

      # appspec 파일 Copy
      - name: Copy Appspec
        run: cp appspec.yml ./$PROJECT_NAME

      # 위에서 빌드한 파일들을 압축하여 ./$PROJECT_NAME 이름으로 압축 파일 만듦
      - name: Make Zip File
        run: zip -qq -r ./$GITHUB_SHA.zip ./$PROJECT_NAME
        shell: bash

      # S3에 업로드할 수 있도록 권한 부여, 여기서 key, value 값은 IAM의 key, value 값임 -> application.properties와 함께 github secrets에 저장해야함.
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      # S3로 파일을 업로드하는 동작
      - name: Upload to S3
        run: |
          aws deploy push \
          --application-name $CODE_DEPLOY_APP_NAME \
          --ignore-hidden-files \
          --s3-location s3://$BUCKET_NAME/$PROJECT_NAME/$GITHUB_SHA.zip \
          --source .

      # Code Deploy에 코드 배포
      - name: Code Deploy
        run: aws deploy create-deployment --application-name $CODE_DEPLOY_APP_NAME --file-exists-behavior OVERWRITE --deployment-group-name $DEPLOYMENT_GROUP_NAME --s3-location bucket=$BUCKET_NAME,bundleType=zip,key=$PROJECT_NAME/$GITHUB_SHA.zip